name,ring,quadrant,isNew,description
.NET Framework,hold,languages & frameworks,TRUE,"<p>We still maintian .NET Framework projects, but feature development stopped at version 4.8. We build new C# projects with a current version of .NET.</p>"
ASP.NET,adopt,languages & frameworks,TRUE,"<p>A cross-platform and open source framework for building Web applications and Web APIs.</p><p>As we've moved toward cloud-native architectures and begun to build rich user interfaces with Vue.js, we've moved away from Razor views but continue to find ASP.NET an excellent framework for building back-end APIs for those apps.</p>"
C#,adopt,languages & frameworks,TRUE,"<p>Our preferred language for the application development teams; with most of our codebase in C#, we benefit from having a significant body of experience and tooling to support writing, building and deploying software writtten in C# and .NET.<p>"
Coypu,hold,languages & frameworks,TRUE,"<p>Coypu is an open source project that provides a wrapper around Selenium with the aim of simplifying interaction with the browser DOM.</p><p>It's been used in several QA automation projects, but development on Coypu has slowed, and our QA team has developed an internal framework that provides similar benefits.</p>"
Hangfire,hold,languages & frameworks,TRUE,"<p>Background job runner with persistent storage.</p><p>This library is very useful for scenarios that involve polling for incoming jobs, especially where large workloads are involved that may need to be paused and restarted.</p><p>However, we're increasingly focused on being cloud-native, and we believe there are better approaches through technologies like Lambda functions, Fargate tasks and SQS.</p>"
HyperApp,hold,languages & frameworks,TRUE,"<p>A lightweight UI framework with similarities to React. HyperApp generally benchmarks faster than Vue or React, but adoption and awareness are far below that of Vue, Angular and React. Although we have some experience with it from projects at the RSC, its relatively small user community means we've settled on 'hold' for this blip.</p>"
JavaScript,adopt,languages & frameworks,TRUE,"<p>As the programming language supported by all major Web browsers, and also supported in some AWS use cases that do not offer support for .NET such as Lambda@Edge, JavaScript is unavoidable for us.</p><p>We prefer JavaScript to TypeScript. However, C# remains our preferred choice when it's an option.</p>"
JSON,adopt,languages & frameworks,TRUE,"<p>Although we're often limited to XML due to its broad adoption within the publishing industry, JSON is our default choice for information interchange and document storage.</p>"
NuxtJS,trial,languages & frameworks,TRUE,<p>See: <i>serverless-side rendering</i>.</p>
Powershell,adopt,languages & frameworks,TRUE,"<p>Microsoft's open-source, cross-platform command-line shell and scripting engine built on .NET. We find this is the best choice for scripting on Windows due to its powerful language features and the ease with which it can call .NET libraries. As we move toward GitHub Actions, its cross-platform support gives us some leeway to include scripts in our CI/CD pipelines that can run on both Windows and Linux runners.</p>"
Python,assess,languages & frameworks,TRUE,"<p>We try to balance using best-of-breed tools against a proliferation of technology stacks. By standardising on C# and JavaScript, we cover everything from back-end data processing to single-page apps. Our decision to put Python into the <i>Assess</i> ring is due in part to its extensive use by our data scientists, and also because we feel that the range of scientific libraries written for Python may make it the right choice in certain circumstances.</p>"
Razor,hold,languages & frameworks,TRUE,"<p>We maintain applications build with Razor views and have recently used them in new development. But modern UI frameworks like VueJS make much richer user experiences possible and are where front-end developers tend to have experience. Meanwhile, frameworks like NuxtJS allow us to cover SEO and latency concerns.</p>"
React,hold,languages & frameworks,TRUE,"<p>The front-end developers discussed UI framework choices at length and ran parallel spikes as part of an assessment to determine our preferred choice. While React has the largest user community, we found VueJS slightly easier to work with and we already have Vue applications in our estate. Based on our investigation, we found it unlikely we'd encounter a use case that would warrant switching to React.</p>"
REST,adopt,languages & frameworks,TRUE,"<p>Our preferred architectural style for machine-machine interfaces based on its ubiquity, readability, performance and scalability. We also discussed GraphQL, but we haven't identified a need for it in our estate yet.</p>"
Sass,trial,languages & frameworks,TRUE,"<p>We have some Sass in our applications, but we would prefer to use native CSS. Frameworks like Sass and Less are becoming less relevant as the enhancements they provide are gradually becoming standard features of CSS.</p>"
SpecFlow,hold,languages & frameworks,TRUE,"<p>SpecFlow is a BDD framework aimed at making UI/integration test cases readable and definable by groups outside of QA and development, such as business analysts.</p><p>It's used in some of our older test automation projects, but we've never found that the extra effort of learning and implementing SpecFlow has yielded any particular advantage, nor has it led to any new engagement with BAs or other stakeholders.</p>"
Terraform,adopt,languages & frameworks,TRUE,"<p>Terraform is an open-source Infrastructure as Code (IaC) tool for declaratively defining cloud infrastructure using a provider-agnostic language and toolset.</p><p>We have extensive in-house experience with Terraform for AWS for our applications as well as our broader infrastructure, and we've benefitted from being being able to easily replicate infrastructure across environments. It is our default choice for IaC.</p>"
VueJS,trial,languages & frameworks,TRUE,"<p>We have recent in-house experience with VueJS from applications such as MarinLit, which was built as a single-page application. In a recent review of UI frameworks, we confirmed that VueJS is our preferred framework on the basis of its ease of use, its large user comminity, the benefit of existing in-house experience and its ability to run server[less]-side through NuxtJS.<p>"
WCF,hold,languages & frameworks,TRUE,"<p>Although we have legacy applications built with WCF services, it's far simpler to build and configure JSON Web services with ASP.NET.</p>"
XML,hold,languages & frameworks,TRUE,"<p>The wider publishing industry makes XML unavoidable for us, but we prefer to use JSON for data persistence and interchange when possible. We feel JSON provides better readability and is easier to deal with in code.</p>"
AWS EC2,hold,platforms,TRUE,"<p>EC2 provides an easy on-ramp into cloud infrastructure, allowing us to deploy on-premise applications into AWS with minimal changes, but it has relatively high running and maintenance costs and is rarely the best option for hosting. Most of our workloads are well suited to Lambda functions.</p>"
AWS Fargate,assess,platforms,TRUE,"<p>AWS Fargate providse container hosting without the need to manage the host OS. Fargate tasks can be run ad-hoc, on a schedule, based on a triggger, or as a 24/7 service, which makes it an attractive option for workloads that are too large for Lambda execution, or that would otherwise require an EC2 instance.</p>"
Bitbucket Repositories,hold,platforms,TRUE,<p>We're beginning a migration to GitHub Enterprise and don't want to maintain multiple source repository providers long-term.</p>
GitHub Enteprise,trial,platforms,TRUE,"<p>A git source repository provider with integrated CI/CD pipelines, NuGet package registries and dependency scanning. Provides a choice of cloud-hosted build platforms (Windows, Linux & MacOS) and allows self-hosted runners to be installed on internal infrastructure.</p>"
JFROG Artifactory,hold,platforms,TRUE,<p>A private package registry used by the RSC to publish and consume NuGet packages internally. We only use a small subset of the features offered by Artifactory</p>
TeamCity,hold,platforms,TRUE,<p>We're beginning a migration to GitHub Enterprise and don't want to maintain multiple CI/CD platforms long-term.</p>
Agile Terraform,adopt,techniques,TRUE,"<p>A phrase we use internally to differentiate the approach used by the application development teams to writing Terraform code, in which we apply agile and software engineering principles, from that used by our infrastructure team, which has a greater focus on segregating environments and building reusable modules. Examples include: passing logically grouped parameters around in 'objects' (OO); defer creation of shared modules until repetition/complexity warrants it (YAGNI); aggressively parameterise environment variables to avoid duplicated TF code (DRY); etc.</p>"
GitHub Flow,hold,techniques,TRUE,"<p>Intended to facilitate code review by encapsulating changes in pull requests. Has the disadvantage that feature branches can hang around for a long time, increasing the size and complexity of merge conflicts, presenting an obstacle to Push on Green.</p>"
NoSQL,adopt,techniques,TRUE,"<p>We use this term to describe modern databases that are not based on relational database concepts for data storage, with examples including DynamoDB, MongoDB and Amazon S3.</p><p>The absence of relational constraints is a major factor in the scalability of NoSQL databses. For instance, DynamoDB has guaranteed sub-10ms response times at any scale. Most of the relational-type data we've encountered when building with NoSQL architectures is simple lookups like journal titles and category lists. By combining the data store with a Lucene engine such as OpenSearch, it's relatively easy to build such reference lists from loosely structured data while removing some of the overheads of managing schemas and referential integrity. OpenSearch also makes certain query types accessible that would be difficult to implement in SQL, especially text queries..</p><p>NoSQL approaches can bring their own challenges. For example, DynamoDB has very limited indexing capabilities and doesn't have features like sequential IDENTITY types; S3 is a key-value store with no indexing aside from the full key. Transactional/atomic operations may be unavailable or expensive on NoSQL platforms.</p>"
OAuth/OIDC,adopt,techniques,TRUE,<p>OAuth is an open standard for delegated access to protected resources. OpenID Connect (OIDC) adds an authentication layer to Oauth. We have existing OIDC integrations with our internal SSO provider. OIDC will play a bigger part in our product offerings as we work to improve our digital experience.</p>
Push on Green,trial,techniques,TRUE,"<p>We think of Push on Green to mean that code and configuration changes are deployed with some level of automation provided all tests pass. Deployment can be gated on manual verification. Comprehensive test coverage, good review processes and confidence in the team's ability to deliver low-defect software are cited as prerequisites.</p><p>Proceed with caution for applications with complex or in-flux UI testing needs as UI test automation tends to take a disproportial amount of effort and maintenance.</p><p>There should be a distinction between critical, core functionality vs. features that can be broken short-term so that new, non-critial features to be brought live rapidly while incomplete. Support for this technique really needs to be built in from the start, so we would typically not consider migrating established applications to a Push on Green pipeline.</p>"
RDBMS,adopt,techniques,TRUE,"<p>We continue to use RDBMS, mainly Microsft SQL Server, in both internal and Web-facing applications. Developing for RDBMS can be much easier than for NoSQL as the tooling, design patterns and community support are much more established.</p>"
Trunk-based development,trial,techniques,TRUE,"<p>Trunk-based development has a focus on frequent commits to the main branch so that delays in feature and bugfix deployment are kept to a minimum. Feature branches may be used in larger development teams, but is should be rare that a branch exists for longer than two days. We encourage pair/mob programming as it replaces the retrospective code review step, reducing delays to integration and deployment. Good test coverage is essential. Use trunk-based development in projects planning to use Push on Green.</p>"
Serverless-side rendering,trial,techniques,TRUE,"<p>A technique supported by frameworks such as Nuxt.js that allows routes in a single-page app to be handled and rendered by a Lambda fuction or server.</p>
<p>This approach has some important benefits for us:</p>
<ul><li>Improved SEO over single-page apps as search engines can crawl fast, pre-rendered and cacheable pages with the right meta tags.</li>
<li>Fast page load times from deep links as we're able to deliver a fully-rendered page with edge caching for frequently-accessed content.</li>
<li>The browser can switch the page to a single-page app as soon as the additional UI code had loaded, providing a seamless transtion to single-page app user exeprience.</li></ul>"
Docker Desktop,trial,tools,TRUE,<p>A desktop docker engine with Linux and Windows virtualisation support; allows container images to be built and executed in a local dev environment.</p>
DynamoDB,adopt,tools,TRUE,"<p>A fast and highly scalable NoSQL option in AWS with good .NET API support.</p><p>There are some limitations to be aware of, such as size limit of 400KB per document, its very basic query capabilities and the need to configure throughput capacity based on the expected traffic. Transactional operations are possible, but are more expensive than non-transactional operations.</p>"
ElasticSearch/OpenSearch,adopt,tools,TRUE,"<p>A full-text search engine based on Apache Lucene.</p><p>Our default choice when we need to provide search over NoSQL databases. Has good .NET API support. Has powerful search capabilities. The mapping configurations can become complicated, and the indexes may need to be rebuilt for some mapping changes.</p>"
Miro Boards,adopt,tools,TRUE,"<p>We've found the flexible visualisation of workstreams and real-time collaboration to be of value. Miro boards can become complicated and unwealdy without some level of management. The ability to create items quickly and promote them to JIRA cards later is helpful for meeting flow and whiteboarding, but keep in mind that status changes in Miro aren't pushed back to JIRA. Some in the team felt that its flexibility can lead to over-use.</p>"
ParcelJS,adopt,tools,TRUE,"<p>An easy to use, low-configuration bundler and minifier.</p>"
CloudFormation,hold,tools,TRUE,"<p>Due to our existing, in-house experience with Terraform, we've opted not to use CloudFormation.</p>"
Puppeteer,trial,languages & frameworks,TRUE,<p>In use for UI tests in several projects. Useful as it allows tests to exercise the UI code without the back-end services. Provides an alternative to Selenium.</p>
