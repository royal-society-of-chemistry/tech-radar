name,ring,quadrant,isNew,description
.NET Framework,Hold,languages & frameworks,TRUE,"<p>We still maintain some .NET Framework code, but feature development stopped at version 4.8. We build new C# projects with a current version of .NET.</p>"
ASP.NET Minimal APIs,Adopt,languages & frameworks,FALSE,"<p>A lightweight successor to Controller classes. ASP.NET Minimal APIs provide a more declarative syntax for web applications, allowing for more inline code and smaller projects.</p>
<p>These are now in broad use at the RSC.</p>"
ASP.NET MVC,Hold,languages & frameworks,FALSE,"<p>We use this blip to refer to web application development using ASP.NET Core MVC.</p>
<p>As front-end frameworks like Vue.js enable more contemporary UI designs that provide a better user experience than server-side applications, we no longer develop MVC Web applications, even for internal applications.</p>
<p>See also: ASP.NET Razor pages.</p>"
ASP.NET Razor pages,Hold,languages & frameworks,FALSE,"<p>An ASP.NET framework for building views within ASP.NET Core MVC.</p>
<p>The Merck Index Online is the most recently developed application in our estate built using Razor views, albeit a hybrid approach that uses ASP.NET only to pre-render content. This approach was chosen mainly to minimise page load times and improve SEO, but we now use frameworks like NuxtJS to deliver single-page apps that load quickly on the first page view and also work well with search engines.</p>"
Blazor,Hold,languages & frameworks,FALSE,"<p>Blazor is framework for building interactive Web applications using .NET, with the option to compile to WebAssembly to run code in the browser.</p>
<p>Although one of our internal applications uses Blazor, Vue is our first choice for UI development and is the framework used to build our shared UI component library. With this mind, and with its relatively small developer community, we'd be unlikely to move to a Blazor for UI work.</p>"
GraphQL,Assess,languages & frameworks,FALSE,"<p>A query language and runtime that enables API clients to request specific data from a server by defining the structure of the desired response.</p>
<p>Well suited to large and complicated data structures, where its declarative data operations can make API calls much more efficient than could be achieved with REST APIs. We consume GraphQL services from Salesforce.</p>
<p>When compared to REST, GraphQL is slightly more complicated as a consumer, but requires much greater engineering effort to implement in a service, especially where partial object updates need to be supported. We're not currently planning or building any services that would especially benefit by offering GraphQL services.</p>"
Hangfire,Hold,languages & frameworks,FALSE,"<p>Background job runner with persistent storage.</p>
<p>This library is very useful for scenarios that involve polling for incoming jobs, especially where large workloads are involved that may need to be paused and restarted.</p>
<p>However, we're increasingly focused on being cloud-native, and we believe there are better approaches through technologies like Lambda functions, Fargate tasks and SQS.</p>"
HyperApp,Hold,languages & frameworks,FALSE,"<p>A lightweight UI framework with similarities to React. HyperApp generally benchmarks faster than Vue or React, but adoption and awareness are far below that of Vue, Angular and React. Although we have some experience with it from projects at the RSC, its relatively small user community means we've settled on 'hold' for this blip.</p>"
JSON,Adopt,languages & frameworks,FALSE,"<p>Although we're often limited to XML due to its broad adoption within the publishing industry, JSON is our default choice for information interchange and document storage.</p>"
NodeJS,Adopt,languages & frameworks,FALSE,"<p>Node is currently our second framework of choice after .NET. We typically use it for Lambda@Edge functions and NuxtJS in production. In development, it's essential for local Vue servers and package management via NPM.</p>"
NuxtJS,Adopt,languages & frameworks,FALSE,<p>See: <i>server side prerendering</i>.</p>
Playwright (for back-end/C#),Assess,languages & frameworks,TRUE,"<p>A headless browser testing framework and analysis tools developed by Microsoft.</p>
<p>When compared to our existing frameworks for browser testing, it is relatively simple to use, suffers from fewer driver/browser compatibility issues and performs better in GitHub Actions. Features such as temporal testing and cookie management enable otherwise difficult test cases. The support for C#/.NET isn't as good as it is for JavaScript.</p>"
Playwright (for front end/JS),Adopt,languages & frameworks,TRUE,"<p>A headless browser testing framework and analysis tools developed by Microsoft.</p>
<p>When compared to our existing frameworks for browser testing, it is relatively simple to use, suffers from fewer driver/browser compatibility issues and performs better in GitHub Actions. Features such as temporal testing and cookie management enable otherwise difficult test cases. The team has found the JavaScript interface more mature than the .NET equivalent. Well supported with Visual Studio Code extensions to assist with debugging. Also has tooling to scaffold test scripts from recorded sessions.</p>"
Powershell,Adopt,languages & frameworks,FALSE,"<p>Microsoft's open-source, cross-platform command-line shell and scripting engine built on .NET. We find this is the best choice for scripting on Windows due to its powerful language features and the ease with which it can call .NET libraries. As we move toward GitHub Actions, its cross-platform support gives us some leeway to include scripts in our CI/CD pipelines that can run on both Windows and Linux runners. Already used in Octopus Deploy and Cake scripts.</p>"
preact,Hold,languages & frameworks,TRUE,"<p>A lightweight JavaScript UI framework based on React.</p>
<p>We're watching the development of preact and may choose to run trials with it in the future, but with a relatively small developer community compared to Vue, we don't see a compelling reason to use it at this stage.</p>"
Puppeteer,Hold,languages & frameworks,FALSE,"<p>A NodeJS library for headless browser automation and UI testing.</p>
<p>We trialled Puppeteer as it seemed like a promising alternative to Selenium, but we found it to be fragile and have since moved on to Playwright.</p>"
Python,Trial,languages & frameworks,FALSE,"<p>A dynamically-typed programming language designed with an emphasis on readability. Used by the Data Science & Insights team for the data gathering and processing.</p>
<p>We try to balance using best-of-breed tools against a proliferation of technology stacks. By standardising on C# and JavaScript, we cover most cases from back-end data processing to single-page apps. However, Python is an obvious choice for certain scenarios such as data science and AI. It can also be a good choice for prototyping.</p>"
React,Assess,languages & frameworks,FALSE,"<p>An open-source JavaScript library for building UIs.</p>
<p>We have discussed UI framework choices at length and have run parallel spikes as part of an assessment to determine our preferred choice. While React has the largest user community, we found VueJS slightly easier to work with and we already have Vue applications in our estate. Based on our investigation, we found it unlikely we'd encounter a use case that would warrant switching to React, but it remains the most popular Javascipt framework for UI development.</p>"
Sass,Assess,languages & frameworks,FALSE,"<p>A preprocessor scripting language that extends CSS with features like variables, nested rules, and mixins.</p>
<p>We feel this is becoming less relevant as the core CSS feature set is improved, but there are cases where we might still use it, for example if working on a project that couldn't use our shared UI component library.</p>"
Tailwind CSS,Adopt,languages & frameworks,TRUE,"<p>A CSS framework that provides low-level utility classes.</p>
<p>Works well with the shared component library. Has good support for responsive design. Makes it fast and efficient to get started with prototypes and new projects. Has a very active community, frequent NPM updates and good documentation.</p>"
TypeScript,Trial,languages & frameworks,FALSE,"<p>Many frameworks such as Vue lean toward TypeScript in their example code and community projects. We have generally preferred to use pure JavaScript as the language has improved and some of the common problems solved by having a typed layer on top of JavaScript can be addressed through other means like JSDoc.</p>
<p>Using TypeScript comes at the expense of some native JavaScript features. It isn't compatible with some tools such as AVA. However, TypeScript adds guardrails that we find can be advantageous for shared components.</p>"
VueJS,Adopt,languages & frameworks,FALSE,"<p>Vue is our preferred framework on the basis of its ease of use, its large user community, the benefit of existing in-house experience and its support for server prerendering through Nuxt.</p>"
Webassembly in serverless functions,Trial,languages & frameworks,FALSE,"<p>We plan to explore WebAssembly for AWS Lambda functions as there may be performance benefits to be gained. However, we also want to keep in mind that there may be security considerations unique to this combination.</p>"
AWS Fargate,Adopt,platforms,FALSE,"<p>AWS Fargate provides container hosting without the need to manage the host OS. Fargate tasks can be run ad-hoc, on a schedule, based on a trigger, or as a 24/7 service, which makes it an attractive option for workloads that are too large for Lambda execution, or that would otherwise require an EC2 instance.</p>"
OpenAI API,Trial,platforms,FALSE,"<p>Provides a means to use ChatGPT with private data.</p>
<p>This is a fast-evolving space with multiple service providers offering very different performance profiles suited to different scenarios. With this in mind, we would tend to consider a range of service providers for LLM services.</p>"
.NET Core microservices,Adopt,techniques,TRUE,"<p>We typically use this term to refer to Lambda functions that directly use API Gateway APIs for .NET, with the C# project generated using the AWS Lambda project template. For microservices implementations, this has an advantage over <i>Serverless ASP.NET</i> because Lambda functions map directly to .NET methods, whereas in <i>Serverless ASP.NET</i>, the Lambda function is a wrapper around an HTTP service that has its own request mapping logic. However, deployment of these services tends to take more work because each function needs its own route in API Gateway, and it's harder to launch the project locally as an HTTP service for debugging.</p>
<p>Newer projects such as the Resource APIs use this approach.</p>"
Blue/green deployments,Trial,techniques,FALSE,"<p>Well suited to UI-centric applications where continuity of service is important and in scenarios where two versions of an application can't be hosted simultaneously, but maintaining two live environments is costly. Special care and planning is needed for data stores, especially where RDBMS schema changes are needed between deployments.</p>
<p>We would tend not to consider a blue/green deployment strategy. However, we <i>do</i> use a version of it for our OpenSearch indexes and mappings.</p>"
GitHub Flow,Adopt,techniques,FALSE,"<p>GitHub Flow helps to streamline code review by encapsulating changes within pull requests.</p>
<p>The pull request review process is particularly beneficial for quality assurance, especially in teams handling multiple projects. It is favored by our outsourced development partners as it provides a consolidated point of documentation for features that may consist of multiple commits.</p>
<p>A drawback is that feature branches can linger, leading to larger and more complex merge conflicts, which can hinder the 'Push on Green' strategy. We ultimately aim to build confidence in our CI/CD process to a level where pull requests become unnecessary.</p>"
NoSQL,Adopt,techniques,FALSE,"<p>We use this term to describe modern databases that are not based on relational database concepts for data storage, with examples including DynamoDB, MongoDB and Amazon S3. It also includes MarkLogic, which has been a central component of our digital estate for around 10 years.</p>
<p>The absence of relational constraints is a major factor in the scalability of NoSQL databases. For instance, DynamoDB has guaranteed sub-10ms response times at any scale. Most of the relational-type data we've encountered when building with NoSQL architectures is simple lookups like journal titles and category lists. By combining the data store with a Lucene engine such as OpenSearch, it's relatively easy to build such reference lists from loosely structured data while removing some of the overheads of managing schemas and referential integrity. OpenSearch also makes certain query types accessible that would be difficult to implement in SQL, especially text queries.</p>
<p>NoSQL approaches can bring their own challenges. For example, DynamoDB has very limited indexing capabilities and doesn't have features like sequential IDENTITY types; S3 is a key-value store with no indexing aside from the full key. Transactional/atomic operations may be unavailable or expensive on NoSQL platforms.</p>
<p>The choice of NoSQL over RDBMS depends in part on the data being well suited to a document structure.</p>"
Push on Green,Adopt,techniques,FALSE,"<p>We think of Push on Green to mean that code and configuration changes are deployed with some level of automation provided all tests pass. Deployment can be gated on manual verification. Highly dependent on comprehensive, good-quality test coverage, good review processes and confidence in the team's ability to deliver low-defect software.</p>
<p>We use this technique in some but not all projects, and find it easier to implement for back-end and non-UI applications as it's harder to catch visual regressions with automated tests, although feature flags and A/B tests can be mitigations. We don't use it for Terraform. We find it important to have a clear definition of ""green"" when applying this technique.</p>
<p>Proceed with caution for applications with complex or in-flux UI testing needs as UI test automation tends to take a disproportionate amount of effort and maintenance.</p>
<p>Applications composed of multiple deployable components may not be well suited to this technique, for example an application where the UI and a set of back-end microservices are independently deployed.</p>
<p>There should be a distinction between critical, core functionality vs. features that can be broken short-term so that new, non-critical features can be brought live rapidly while incomplete. Support for this technique really needs to be built in from the start, so we would typically not consider migrating established applications to a Push on Green pipeline.</p>"
RDBMS,Adopt,techniques,FALSE,"<p>Relational database management systems such as SQL Server.</p>
<p>We continue to use RDBMS in both internal and web-facing applications. Developing for RDBMS can be easier than for NoSQL as the tooling, design patterns and community support are more established. They can be more expensive to run in cloud hosted environments than NoSQL databases.</p>
<p>Although some applications are clearly well-suited to RDBMS, we usually consider NoSQL options as they tend to be better-performing at scale.</p>"
Rolling deployments,Adopt,techniques,FALSE,"<p>We define rolling deployments as a process for deploying new versions of an application to a subset of instances, ensuring a seamless update without disrupting the overall service. This technique is particularly useful when we have control over the running instances of the application, such as with EC2 and ECS. We use this approach in the Librarian workstream. We don't use it for AWS Lambda deployments.</p>
<p>We think of this approach as being similar to the blue/green deployment strategy, but it differs in that it doesn't involve duplicating the entirety of the infrastructure, including databases.</p>"
Server side prerendering (e.g. Nuxt),Adopt,techniques,FALSE,"<p>A technique supported by frameworks such as Nuxt.js and Blazor that allows routes in a single-page app to be handled and rendered on the server.</p>
<p>For sites that require SEO, it's important to use a framework that supports this. Some key advantages over purely browser-based SPAs are:</p>
<ul><li>Improved SEO over single-page apps as search engines can crawl fast, pre-rendered and cacheable pages with the right meta tags.</li>
<li>Fast page load times from deep links as we're able to deliver a fully-rendered page with edge caching for frequently-accessed content.</li>
<li>The browser can switch the page to a single-page app as soon as the additional UI code had loaded, providing a seamless transition to single-page app user experience.</li></ul>"
"Serverless ASP.NET
(lambda)",Trial,techniques,FALSE,"<p>ASP.NET Core applications can be deployed as AWS Lambda functions for serverless operation.</p>
<p>Useful for migrating services from VMs and EC2 into serverless infrastructure. Cold start times can cause high latency for some requests, but there are mitigations for this.</p>
<p>When compared to <i>ASP.NET Core microservices</i>, this approach can have advantages. As the URI routing is handled internally, multiple endpoints can be exposed through a single API Gateway route with wildcards, making deployments simpler.</p>"
Trunk-based development,Trial,techniques,FALSE,"<p>Trunk-based development has a focus on frequent commits to the main branch so that delays in feature and bugfix deployment are kept to a minimum. Feature branches may be used in larger development teams, but it should be rare that a branch exists for longer than two days. We encourage pair/mob programming as it replaces the retrospective code review step, reducing delays to integration and deployment.</p>
<p>We believe keys to success include:</p>
<ul><li>Confidence in test coverage</li>
<li>Confidence in the CI/CD pipeline</li>
<li>Collection of code quality metrics such as test coverage and DORA metrics</li></ul>
<p>We're more likely to consider trunk-base development in newer projects with smaller teams and trusted automated test coverage, especially those planning to adopt Push on Green.</p>"
AuroraDB,Assess,tools,FALSE,"<p>An RDBMS service provided by Amazon offering compatibility with MySQL and PostgreSQL databases. There can be significant cost savings vs. SQL Server deployments into AWS, but our existing experience and in-house expertise with SQL Server mean that switching to another relational database technology will require careful consideration, even for greenfield projects.</p>
<p>Aurora Serverless provides an additional layer of scalability and flexibility that would factor into any decision to trial AuroraDB.</p>
<p>Following the evaluation we ran in 2023, we would be likely to choose PostgreSQL as the database engine.</p>"
Browserstack,Assess,tools,FALSE,"<p>A cloud-based, cross-browser testing platform used to test and debug web applications on various browsers and devices in real-time.</p>
<p>Our use of this service is diminishing as we've found other tools like Playwright to be a much better fit for us, but it's useful for testing specific edge cases involving unique browser and platform combinations.</p>"
Docker Desktop,Trial,tools,FALSE,"<p>A desktop Docker engine with Linux and Windows virtualisation support.</p>
<p>We have a few use cases for Docker Desktop, such as container-based development with Devcontainers and to assist in building Dockerfiles to include in our build pipelines. It isn't currently one of our default developer tools.</p>"
DynamoDB,Adopt,tools,FALSE,"<p>A fast and highly scalable NoSQL option in AWS with good .NET API support.</p>
<p>There are some limitations to be aware of, such as maximum document size, limited query capabilities and the need to configure throughput capacity based on the expected traffic. Transactional operations are possible but are more expensive than non-transactional operations.</p>
<p>When compared to S3, its built-in support for JSON operations, indexing capabilities, atomic transactions and simple data operations make it a more suitable choice in some situations.</p>
<p>It can be tricky to achieve certain tasks that are trivial in other NoSQL databases, such as sequential ID generation.</p>"
ElasticSearch/OpenSearch,Adopt,tools,FALSE,"<p>A full-text search engine based on Apache Lucene.</p>
<p>Our default choice when we need to provide search over NoSQL databases. Has good .NET API support, but its APIs have a steep learning curve. Has powerful search capabilities. The mapping configurations can become complicated, and the indexes may need to be rebuilt for some mapping changes. Care needs to be taken to avoid performing relational queries, as these adversely affect query performance.</p>
<p>In terms of scalability, it is performing well with ChemSpider's 130 million chemical structures.</p>"
JSDoc,Adopt,tools,TRUE,"<p>A markup language for adding annotations to JavaScript, similar to XMLDoc. We're increasingly using JSDoc annotations in our codebase.</p>"
MongoDB,Assess,tools,FALSE,"<p>A NoSQL database management system that is well suited to running complex queries and aggregations over large, unstructured data sets. Supports JSON and BSON. Amazon DocumentDB is compatible with MongoDB.</p>
<p>Although a well-established technology, we haven't recently identified any use cases where it would be particularly advantageous to us. We found the .NET client libraries to be poor when we trialled MongoDB in 2022, but these may have improved since.</p>"
MSSQL,Adopt,tools,FALSE,"<p>SQL Server has been our default RDBMS for many years. We have extensive in-house experience with SQL Server and it has high-quality supporting tools. It is supported in Amazon RDS but is expensive compared to other options such as Aurora, and SQL Server Cartridges are not supported in RDS. We continue to use it but should consider other options for new projects.</p>"
Storybook,Adopt,tools,FALSE,"<p>An open-source tool suite for building, testing, accessibility checking and documenting shared UI components.</p>
<p>Storybook has helped us to build rich documentation and visualisation around our UI component library. Good integration with Frontify. It has a large set of capabilities we have yet to explore, including automated testing, user workflows and prototyping tools.</p>"
