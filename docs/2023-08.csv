name,ring,quadrant,isNew,description
ASP.NET Minimal APIs,Trial,languages & frameworks,TRUE,"<p>ASP.NET Minimal APIs provide a more declarative syntax than ASP.NET Core MVC for Web applications, allowing for more inline code and smaller projects.</p>
<p>We're beginning conversion to Minimal APIs in some projects, but don't consider this a fully proven approach for our uses yet.</p>"
MVC on ASP.NET,Hold,languages & frameworks,TRUE,"<p>We use this blip to refer to Web application development using ASP.NET Core MVC.</P>
<p>As front-end frameworks like Vue.js enable more contemporary UI designs that provide a better user experience than server-side applications, we no longer develop MVC Web applications, even for internal applications.</p>
<p>See also: ASP.NET Razor pages.</p>"
ASP.NET Razor pages,Hold,languages & frameworks,FALSE,"<p>An ASP.NET framework for building views within ASP.NET Core MVC.</p>
<p>The Merck Index Online is the most recently developed application in our estate built using Razor views, albeit a hybrid approach that uses ASP.NET only to pre-render content. This approach was chosen mainly to minimise page load times and improve SEO, but we now use frameworks like NuxtJS to deliver single-page apps that load quickly on the first page view and also work well with search engines.</p>"
Blazor,Assess,languages & frameworks,TRUE,"<p>A framework for building interactive Web applciations using .NET, with the option to compile to WebAssembly to run code in the browser.</p>
<p>We've used Blazor in one of our internal applications. It's especially interesting to us given that .NET is our framework of choice for server-side development. The ability to compile shared code to Web Assmebly has the potential to reduce overall development effort and bring performance improvements to our end user applications. The server-side prerendering feature of Blazor could also be of interest as a replacement for NuxtJS.</p>"
C#,Adopt,languages & frameworks,FALSE,"<p>Our preferred language for the application development teams; with most of our codebase in C#, we benefit from having a significant body of experience and tooling to support writing, building and deploying software writtten in C# and .NET.</p>"
GraphQL,Trial,languages & frameworks,TRUE,"<p>A query language and runtime that enables API clients to request specific data from a server by defining the structure of the desired response.</p>
<p>We believe that the flexibility of GraphQL when compared with REST and SOAP makes it worth exploring for new API development.</p>"
Hangfire,Hold,languages & frameworks,FALSE,"<p>Background job runner with persistent storage.</p>
<p>This library is very useful for scenarios that involve polling for incoming jobs, especially where large workloads are involved that may need to be paused and restarted.</p>
<p>However, we're increasingly focused on being cloud-native, and we believe there are better approaches through technologies like Lambda functions, Fargate tasks and SQS.</p>"
HyperApp,Hold,languages & frameworks,FALSE,"<p>A lightweight UI framework with similarities to React. HyperApp generally benchmarks faster than Vue or React, but adoption and awareness are far below that of Vue, Angular and React. Although we have some experience with it from projects at the RSC, its relatively small user community means we've settled on 'hold' for this blip.</p>"
JavaScript,Adopt,languages & frameworks,FALSE,"<p>As the programming language supported by all major Web browsers, and also supported in some AWS use cases that do not offer support for .NET such as Lambda@Edge, JavaScript is unavoidable for us.</p>
<p>We prefer JavaScript to TypeScript. However, C# remains our preferred choice when it's an option.</p>"
JSON,Adopt,languages & frameworks,FALSE,"<p>Although we're often limited to XML due to its broad adoption within the publishing industry, JSON is our default choice for information interchange and document storage.</p>"
WebAssembly in serverless functions,Assess,languages & frameworks,TRUE,"<p>We'd like to explore WebAssembly for AWS Lambda functions as there may be performance benefits to be gained. However, we also want to keep in mind that there may be security considerations unique to this combination.</p>"
NodeJS,Adopt,languages & frameworks,TRUE,"<p>Node is currently our second framework of choice after .NET. We typically use it for Lambda@Edge functions and NuxtJS in production. In development, it's essential for local Vue servers and package management via NPM.</p>"
NuxtJS,Adopt,languages & frameworks,FALSE,<p>See: <i>serverless-side rendering</i>.</p>
Powershell,Adopt,languages & frameworks,FALSE,"<p>Microsoft's open-source, cross-platform command-line shell and scripting engine built on .NET. We find this is the best choice for scripting on Windows due to its powerful language features and the ease with which it can call .NET libraries. As we move toward GitHub Actions, its cross-platform support gives us some leeway to include scripts in our CI/CD pipelines that can run on both Windows and Linux runners.</p>"
Puppeteer,Trial,languages & frameworks,FALSE,"<p>A NodeJS library for headless browser automation and UI testing.</p>
<p>In use for UI tests in several projects. Useful as it allows tests to exercise the UI code without the back-end services. Provides an alternative to Selenium.</p>"
Python,Assess,languages & frameworks,FALSE,"<p>We try to balance using best-of-breed tools against a proliferation of technology stacks. By standardising on C# and JavaScript, we cover everything from back-end data processing to single-page apps. Our decision to put Python into the <i>Assess</i> ring is due in part to its extensive use by our data scientists, and also because we feel that the range of scientific libraries written for Python may make it the right choice in certain circumstances.</p>
<p>Python's ubiquitous use in the field of AI may mean that its usage will increase in our organisation.</p>"
React,Trial,languages & frameworks,FALSE,"<p>The front-end developers discussed UI framework choices at length and ran parallel spikes as part of an assessment to determine our preferred choice. While React has the largest user community, we found VueJS slightly easier to work with and we already have Vue applications in our estate. Based on our investigation, we found it unlikely we'd encounter a use case that would warrant switching to React, but it remains the most popular Javascipt framework for UI development and may be worth considering for new projects.</p>"
REST,Adopt,languages & frameworks,FALSE,"<p>Our preferred architectural style for machine-machine interfaces based on its ubiquity, readability, performance and scalability. We also discussed GraphQL, but we haven't identified a need for it in our estate yet.</p>"
Sass,Adopt,languages & frameworks,FALSE,"<p>We have some Sass in our applications, but we would prefer to use native CSS. Frameworks like Sass and Less are becoming less relevant as the enhancements they provide are gradually becoming standard features of CSS.</p>"
Serverless ASP.NET,Adopt,languages & frameworks,TRUE,"<p>ASP.NET Core applications can be deployed as AWS Lambda functions for serverless operation.</p>
<p>We prefer to use approach where possible as it reduces our need to manage VMs and EC2 instances and gives us a layer of horizonatal scalabilty with no extra effort. Cold start times can cause high latency for some requests, but there are mitigations for this.</p>"
SpecFlow,Hold,languages & frameworks,FALSE,"<p>SpecFlow is a BDD framework aimed at making UI/integration test cases readable and definable by groups outside of QA and development, such as business analysts.</p>
<p>It's used in some of our older test automation projects, but we've never found that the extra effort of learning and implementing SpecFlow has yielded any particular advantage, nor has it led to any new engagement with BAs or other stakeholders.</p>"
Terraform,Adopt,languages & frameworks,FALSE,"<p>Terraform is an open-source Infrastructure as Code (IaC) tool for declaratively defining cloud infrastructure using a provider-agnostic language and toolset.</p>
<p>We have extensive in-house experience with Terraform for AWS for our applications as well as our broader infrastructure, and we've benefitted from being being able to easily replicate infrastructure across environments. It is our default choice for IaC.</p>"
TypeScript,Trial,languages & frameworks,TRUE,"<p>Many frameworks such as Vue lean toward TypeScript in their example code and comminity projects. We have generally preferred to use pure JavaScript as the language has improved and some of the common problems solved by having a typed layer on top of JavaScript can be addressed by linting, unit tests and other tools and techniques.</p>
<p>Using TypeScript comes at the expense of some native JavaScript features. However, TypeScript adds guard rails that we find can be especially advantageous for shared components.</p>
<p>We're trailling TypeScript in our shared components and are using it in one active project.</p>"
VueJS,Adopt,languages & frameworks,FALSE,"<p>VueJS is our preferred framework on the basis of its ease of use, its large user comminity, the benefit of existing in-house experience and its ability to run server[less]-side through NuxtJS.</p>"
WCF,Hold,languages & frameworks,FALSE,"<p>Although we have legacy applications built with WCF services, it's far simpler to build and configure JSON Web services with ASP.NET.</p>"
AWS EC2,Hold,platforms,FALSE,"<p>EC2 provides an easy on-ramp into cloud infrastructure, allowing us to deploy on-premise applications into AWS with minimal changes, but it has relatively high running and maintenance costs and is rarely the best option for hosting. Most of our workloads are well suited to Lambda functions, and we prefer to containerise workloads that aren't suitable for AWS Lambda.</p>"
AWS Fargate,Adopt,platforms,FALSE,"<p>AWS Fargate providse container hosting without the need to manage the host OS. Fargate tasks can be run ad-hoc, on a schedule, based on a triggger, or as a 24/7 service, which makes it an attractive option for workloads that are too large for Lambda execution, or that would otherwise require an EC2 instance.</p>"
Bitbucket Repositories,Hold,platforms,FALSE,<p>We're migrating to GitHub Enterprise and don't want to maintain multiple source repository providers long-term.</p>
GitHub Enteprise,Adopt,platforms,FALSE,"<p>A git source repository provider with integrated CI/CD pipelines, NuGet package registries and dependency scanning. Provides a choice of cloud-hosted build platforms (Windows, Linux & MacOS) and allows self-hosted runners to be installed on internal infrastructure.</p>"
JFROG Artifactory,Hold,platforms,FALSE,<p>A private package registry used by the RSC to publish and consume NuGet packages internally. We only use a small subset of the features offered by Artifactory</p>
OpenAI API,Trial,platforms,TRUE,"<p>Provides a means to use ChatGPT with private data. We're actively exploring some use cases with OpenAI, but are also looking at other providers.</p>"
TeamCity,Hold,platforms,FALSE,<p>We're beginning a migration to GitHub Enterprise and don't want to maintain multiple CI/CD platforms long-term.</p>
Agile Terraform,Trial,techniques,FALSE,"<p>A phrase we use internally to differentiate the approach used by the application development teams to writing Terraform code, in which we apply agile and software engineering principles, from that used by our infrastructure team, which has a greater focus on segregating environments and building reusable modules. Examples include: passing logically grouped parameters around in 'objects' (OO); defer creation of shared modules until repetition/complexity warrants it (YAGNI); aggressively parameterise environment variables to avoid duplicated TF code (DRY); etc.</p>"
Blue/green deployments,Trial,techniques,TRUE,"<p>Well suited to UI-centric applications where continuity of service is important, but maintaining two live environments has cost implications. We use a version of this approach for our OpenSearch indexes and mappings.</p>"
GitHub Flow,Hold,techniques,FALSE,"<p>Intended to facilitate code review by encapsulating changes in pull requests. Has the disadvantage that feature branches can hang around for a long time, increasing the size and complexity of merge conflicts, presenting an obstacle to Push on Green.</p>
<p>We aim to improve confidence in our CI/CD process to the point that we don't feel the need to use pull requests.</p>"
NoSQL,Adopt,techniques,FALSE,"<p>We use this term to describe modern databases that are not based on relational database concepts for data storage, with examples including DynamoDB, MongoDB and Amazon S3. It also includes MarkLogic, which has been a central component of our digital estate for around 10 years.</p>
<p>The absence of relational constraints is a major factor in the scalability of NoSQL databses. For instance, DynamoDB has guaranteed sub-10ms response times at any scale. Most of the relational-type data we've encountered when building with NoSQL architectures is simple lookups like journal titles and category lists. By combining the data store with a Lucene engine such as OpenSearch, it's relatively easy to build such reference lists from loosely structured data while removing some of the overheads of managing schemas and referential integrity. OpenSearch also makes certain query types accessible that would be difficult to implement in SQL, especially text queries.</p>
<p>NoSQL approaches can bring their own challenges. For example, DynamoDB has very limited indexing capabilities and doesn't have features like sequential IDENTITY types; S3 is a key-value store with no indexing aside from the full key. Transactional/atomic operations may be unavailable or expensive on NoSQL platforms.</p>"
OAuth/OIDC,Adopt,techniques,FALSE,<p>OAuth is an open standard for delegated access to protected resources. OpenID Connect (OIDC) adds an authentication layer to Oauth. We have existing OIDC integrations with our internal SSO provider. OIDC will play a bigger part in our product offerings as we work to improve our digital experience.</p>
Push on Green,Adopt,techniques,FALSE,"<p>We think of Push on Green to mean that code and configuration changes are deployed with some level of automation provided all tests pass. Deployment can be gated on manual verification. Comprehensive test coverage, good review processes and confidence in the team's ability to deliver low-defect software are cited as prerequisites.</p>
<p>We use this technique in some but not all projects, and find it easier to implement for back-end and non-UI applications. We don't use it for Terraform. We find it important to have a clear definition of ""green"" when applying this technique.</p>
<p>Proceed with caution for applications with complex or in-flux UI testing needs as UI test automation tends to take a disproportial amount of effort and maintenance.</p>
<p>There should be a distinction between critical, core functionality vs. features that can be broken short-term so that new, non-critial features to be brought live rapidly while incomplete. Support for this technique really needs to be built in from the start, so we would typically not consider migrating established applications to a Push on Green pipeline.</p>"
RDBMS,Adopt,techniques,FALSE,"<p>We continue to use RDBMS, mainly Microsft SQL Server, in both internal and Web-facing applications. Developing for RDBMS can be easier than for NoSQL as the tooling, design patterns and community support are more established.</p>
<p>Although some applications are clearly well-suited to RDBMS, we always consider NoSQL options as they tend to be better-performing at scale.</p>"
Rolling deployments,Adopt,techniques,TRUE,"<p>We define rolling deployments as a process for deploying new versions of an application to a subset of instances, ensuring a seamless update without disrupting the overall service. This technique is particularly useful when we have control over the running instances of the application, such as with EC2 and ECS. We don't use this approach for to AWS Lambda deployments. We use this strategy for OAAP.</p>
<p>We think of this approach as being similar to the blue/green deployment strategy, but it differs in that it doesn't involve duplicating the entirety of the infrastructure, including databases.</p>"
Serverless-side rendering,Trial,techniques,FALSE,"<p>Also referred to as server-side prerendering. A technique supported by frameworks such as Nuxt.js and Blazor that allows routes in a single-page app to be handled and rendered by a Lambda function or server.</p>
<p>This approach has some important benefits for us:</p>
<ul><li>Improved SEO over single-page apps as search engines can crawl fast, pre-rendered and cacheable pages with the right meta tags.</li>
<li>Fast page load times from deep links as we're able to deliver a fully-rendered page with edge caching for frequently-accessed content.</li>
<li>The browser can switch the page to a single-page app as soon as the additional UI code had loaded, providing a seamless transtion to single-page app user exeprience.</li></ul>"
Trunk-based development,Trial,techniques,FALSE,"<p>Trunk-based development has a focus on frequent commits to the main branch so that delays in feature and bugfix deployment are kept to a minimum. Feature branches may be used in larger development teams, but is should be rare that a branch exists for longer than two days. We encourage pair/mob programming as it replaces the retrospective code review step, reducing delays to integration and deployment.</p>
<p>We believe keys to success include:</p>
<ul><li>Confidence in test coverage</li>
<li>Confidence in the CI/CD pipeline</li>
<li>Collection of code quality metrics such as test coverage and DORA metrics</li></ul>
<p>Use trunk-based development in projects planning to use Push on Green.</p>"
Amazon Aurora,Trial,tools,TRUE,"<p>An RDBMS service provided by Amazon offering compatibility with MySQL and PostgreSQL databases. There can be significant cost savings vs. SQL Server deployments into AWS, but our existing experience and in-house expertise with SQL Server mean that switching to another relational database technology will require careful consideration, even for greefield projects.</p>"
Browserstack,Trial,tools,TRUE,"<p>A cloud-based, cross-browser testing platform used to test and debug  Web applications on various browsers and devices in real-time.</p>
<p>We're recently started using this service. Some questions remain for us over the utilty of cross-browser testing vs. functional testing.</p>"
Docker Desktop,Adopt,tools,FALSE,<p>A desktop docker engine with Linux and Windows virtualisation support; allows container images to be built and executed in a local dev environment.</p>
DynamoDB,Adopt,tools,FALSE,"<p>A fast and highly scalable NoSQL option in AWS with good .NET API support.</p>
<p>There are some limitations to be aware of, such as maximum document size, limited query capabilities and the need to configure throughput capacity based on the expected traffic. Transactional operations are possible, but are more expensive than non-transactional operations.</p>
<p>When compared to S3, its built-in support for JSON operations, indexing capabilities, atomic transactions and simple data operations make it a more suitable choice in some situations.</p>"
ElasticSearch/OpenSearch,Adopt,tools,FALSE,"<p>A full-text search engine based on Apache Lucene.</p>
<p>Our default choice when we need to provide search over NoSQL databases. Has good .NET API support. Has powerful search capabilities. The mapping configurations can become complicated, and the indexes may need to be rebuilt for some mapping changes.</p>"
MongoDB,Hold,tools,TRUE,"<p>A NoSQL database management system that is well suited to running complex queries and aggregations over large, unstructured data sets. Amazon DocumentDB is compatible with MongoDB.</p>
<p>Although a well-established technology, we haven't recently identified any use cases where it would be particularly advantageous to us.</p>"
MSSQL,Hold,tools,TRUE,"<p>SQL Server has been our default RDBMS for many years. We have extensive in-house experience with SQL Server and it has high quality supporting tools. It is supported in Amazon RDS but is expensive compared to other options such as Aurora, and SQL Server Cartridges are not supported in RDS. We continue to use it but should consider other options for new projects.</p>"
ParcelJS,Trial,tools,FALSE,"<p>An easy to use, low-configuration bundler and minifier.</p>
<p>We find Vite to be faster.</p>"
Storybook,Trial,tools,TRUE,"<p>An open source tool suite for building, testing, accessibility checking and documenting shared UI components. We're currently building UI components with it. Its intgeration with Frontify is useful for us.</p>"
Vite,Trial,tools,TRUE,<p>Very fast front end scaffolding and packaging with a large user community and wide usage. Currently in use in a couple of RSC projects.</p>
